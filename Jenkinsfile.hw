pipeline {
    agent any
    triggers {
        pollSCM 'H/2 * * * *'
    }
    stages {
        stage('Setup') {
            steps {
                sh "git config --add remote.origin.fetch +refs/heads/master:refs/remotes/origin/master"
                sh "git fetch --no-tags"
                sh 'git checkout $BRANCH_NAME'
                sh 'git remote set-url origin https://${GHTOKEN}@github.com/GreenSense/TestProject.git > /dev/null'
                sh 'git config --global user.email "compulsivecoder@gmail.com"'
                sh 'git config --global user.name "CompulsiveCoder CI"'
            }
        }
        stage('Prepare') {
            steps {
                sh 'sh prepare.sh'
            }
        }
        stage('Init') {
            steps {
                sh 'sh init.sh'
            }
        }
        stage('Check skip CI') {
            steps {
                sh '. ./check-ci-skip.sh'
            }
        }
        stage('Build') {
            when {
                expression {
                    return CheckSkipCI()
                }
            }
            steps {
                sh 'sh build.sh'
            }
        }
        stage('Test') {
            when {
                expression { 1 == 0 }
            }
            steps {
                sh 'sh test.sh'
            }
        }
        stage('Clean') {
            when {
                expression { 1 == 0 }
            }
            steps {
                sh 'sh clean.sh'
            }
        }
        stage('Graduate') {
            when {
                expression { 1 == 0 }
            }
            steps {
                sh 'sh graduate.sh'
            }
        }
        stage('Increment Version') {
            when {
                expression { 1 == 0 }
            }
            steps {
              sh 'sh increment-version.sh'
            }
        }
        stage('Push Version') {
            when {
                expression { 1 == 0 }
            }
            steps {
                sh 'sh push-version.sh'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success() {
          emailext (
              subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
              body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
              recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        failure() {
          emailext (
              subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
              body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
              recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}
def IsSkipCI(l) {
    RESULT=$(git log -1 | grep -c '.*\[ci skip\].*')
    #echo $RESULT
    if [ $RESULT = 1 ]; then
        echo "Skip CI"
        return 1
    else
        echo "Continue CI"
        return 0
    fi
}